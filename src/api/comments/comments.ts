/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * JSONPlaceholder API
 * OpenAPI spec version: 1.0.0
 */
import { useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  QueryClient,
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import type { Comment } from '../jSONPlaceholderAPI.schemas';

import { axiosInstance } from '../../lib/axios';

/**
 * @summary Get comments for a post
 */
export const getCommentsByPostId = (postId: number, signal?: AbortSignal) => {
  return axiosInstance<Comment[]>({
    url: `/posts/${postId}/comments`,
    method: 'GET',
    signal,
  });
};

export const getGetCommentsByPostIdQueryKey = (postId: number) => {
  return [`/posts/${postId}/comments`] as const;
};

export const getGetCommentsByPostIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getCommentsByPostId>>,
  TError = unknown,
>(
  postId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCommentsByPostId>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetCommentsByPostIdQueryKey(postId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getCommentsByPostId>>
  > = ({ signal }) => getCommentsByPostId(postId, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!postId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getCommentsByPostId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetCommentsByPostIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCommentsByPostId>>
>;
export type GetCommentsByPostIdQueryError = unknown;

/**
 * @summary Get comments for a post
 */
export function useGetCommentsByPostId<
  TData = Awaited<ReturnType<typeof getCommentsByPostId>>,
  TError = unknown,
>(
  postId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCommentsByPostId>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetCommentsByPostIdQueryOptions(postId, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}
